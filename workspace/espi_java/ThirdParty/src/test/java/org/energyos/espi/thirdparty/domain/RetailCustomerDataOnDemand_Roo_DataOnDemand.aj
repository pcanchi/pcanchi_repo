// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.energyos.espi.thirdparty.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.energyos.espi.thirdparty.domain.RetailCustomer;
import org.springframework.stereotype.Component;

privileged aspect RetailCustomerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RetailCustomerDataOnDemand: @Component;
    
    private Random RetailCustomerDataOnDemand.rnd = new SecureRandom();
    
    private List<RetailCustomer> RetailCustomerDataOnDemand.data;
    
    public RetailCustomer RetailCustomerDataOnDemand.getNewTransientRetailCustomer(int index) {
        RetailCustomer obj = new RetailCustomer();
        setAuthenticated(obj, index);
        setCustomerSince(obj, index);
        setEmail(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        return obj;
    }
    
    public void RetailCustomerDataOnDemand.setAuthenticated(RetailCustomer obj, int index) {
        Boolean authenticated = true;
        obj.setAuthenticated(authenticated);
    }
    
    public void RetailCustomerDataOnDemand.setCustomerSince(RetailCustomer obj, int index) {
        Calendar customerSince = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH) - 1);
        obj.setCustomerSince(customerSince);
    }
    
    public void RetailCustomerDataOnDemand.setEmail(RetailCustomer obj, int index) {
        String email = "email_" + index;
        if (email.length() > 30) {
            email = email.substring(0, 30);
        }
        obj.setEmail(email);
    }
    
    public void RetailCustomerDataOnDemand.setFirstName(RetailCustomer obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 30) {
            firstName = firstName.substring(0, 30);
        }
        obj.setFirstName(firstName);
    }
    
    public void RetailCustomerDataOnDemand.setLastName(RetailCustomer obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 30) {
            lastName = lastName.substring(0, 30);
        }
        obj.setLastName(lastName);
    }
    
    public RetailCustomer RetailCustomerDataOnDemand.getSpecificRetailCustomer(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        RetailCustomer obj = data.get(index);
        return RetailCustomer.findRetailCustomer(obj.getId());
    }
    
    public RetailCustomer RetailCustomerDataOnDemand.getRandomRetailCustomer() {
        init();
        RetailCustomer obj = data.get(rnd.nextInt(data.size()));
        return RetailCustomer.findRetailCustomer(obj.getId());
    }
    
    public boolean RetailCustomerDataOnDemand.modifyRetailCustomer(RetailCustomer obj) {
        return false;
    }
    
    public void RetailCustomerDataOnDemand.init() {
        data = RetailCustomer.findRetailCustomerEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'RetailCustomer' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.energyos.espi.thirdparty.domain.RetailCustomer>();
        for (int i = 0; i < 10; i++) {
            RetailCustomer obj = getNewTransientRetailCustomer(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
