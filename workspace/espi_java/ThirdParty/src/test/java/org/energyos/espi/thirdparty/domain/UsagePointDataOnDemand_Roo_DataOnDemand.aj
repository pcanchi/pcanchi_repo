// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.energyos.espi.thirdparty.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.energyos.espi.thirdparty.domain.RetailCustomer;
import org.energyos.espi.thirdparty.domain.RetailCustomerDataOnDemand;
import org.energyos.espi.thirdparty.domain.UsagePoint;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UsagePointDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsagePointDataOnDemand: @Component;
    
    private Random UsagePointDataOnDemand.rnd = new SecureRandom();
    
    private List<UsagePoint> UsagePointDataOnDemand.data;
    
    @Autowired
    private RetailCustomerDataOnDemand UsagePointDataOnDemand.retailCustomerDataOnDemand;
    
    public UsagePoint UsagePointDataOnDemand.getNewTransientUsagePoint(int index) {
        UsagePoint obj = new UsagePoint();
        setAddress(obj, index);
        setCity(obj, index);
        setRetailCustomer(obj, index);
        return obj;
    }
    
    public void UsagePointDataOnDemand.setAddress(UsagePoint obj, int index) {
        String address = "address_" + index;
        if (address.length() > 50) {
            address = address.substring(0, 50);
        }
        obj.setAddress(address);
    }
    
    public void UsagePointDataOnDemand.setCity(UsagePoint obj, int index) {
        String city = "city_" + index;
        if (city.length() > 30) {
            city = city.substring(0, 30);
        }
        obj.setCity(city);
    }
    
    public void UsagePointDataOnDemand.setRetailCustomer(UsagePoint obj, int index) {
        RetailCustomer retailCustomer = retailCustomerDataOnDemand.getRandomRetailCustomer();
        obj.setRetailCustomer(retailCustomer);
    }
    
    public UsagePoint UsagePointDataOnDemand.getSpecificUsagePoint(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        UsagePoint obj = data.get(index);
        return UsagePoint.findUsagePoint(obj.getId());
    }
    
    public UsagePoint UsagePointDataOnDemand.getRandomUsagePoint() {
        init();
        UsagePoint obj = data.get(rnd.nextInt(data.size()));
        return UsagePoint.findUsagePoint(obj.getId());
    }
    
    public boolean UsagePointDataOnDemand.modifyUsagePoint(UsagePoint obj) {
        return false;
    }
    
    public void UsagePointDataOnDemand.init() {
        data = UsagePoint.findUsagePointEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'UsagePoint' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.energyos.espi.thirdparty.domain.UsagePoint>();
        for (int i = 0; i < 10; i++) {
            UsagePoint obj = getNewTransientUsagePoint(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
